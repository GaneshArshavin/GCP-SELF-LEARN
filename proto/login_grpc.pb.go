// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package login

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserLoginClient is the client API for UserLogin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserLoginClient interface {
	Login(ctx context.Context, in *LogInRequest, opts ...grpc.CallOption) (*LogInResponse, error)
}

type userLoginClient struct {
	cc grpc.ClientConnInterface
}

func NewUserLoginClient(cc grpc.ClientConnInterface) UserLoginClient {
	return &userLoginClient{cc}
}

func (c *userLoginClient) Login(ctx context.Context, in *LogInRequest, opts ...grpc.CallOption) (*LogInResponse, error) {
	out := new(LogInResponse)
	err := c.cc.Invoke(ctx, "/login.UserLogin/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserLoginServer is the server API for UserLogin service.
// All implementations must embed UnimplementedUserLoginServer
// for forward compatibility
type UserLoginServer interface {
	Login(context.Context, *LogInRequest) (*LogInResponse, error)
	mustEmbedUnimplementedUserLoginServer()
}

// UnimplementedUserLoginServer must be embedded to have forward compatible implementations.
type UnimplementedUserLoginServer struct {
}

func (*UnimplementedUserLoginServer) Login(context.Context, *LogInRequest) (*LogInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedUserLoginServer) mustEmbedUnimplementedUserLoginServer() {}

func RegisterUserLoginServer(s *grpc.Server, srv UserLoginServer) {
	s.RegisterService(&_UserLogin_serviceDesc, srv)
}

func _UserLogin_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLoginServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.UserLogin/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLoginServer).Login(ctx, req.(*LogInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserLogin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "login.UserLogin",
	HandlerType: (*UserLoginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _UserLogin_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/login.proto",
}
